package com.dayvidlakoni.junkyard;

import java.util.ArrayList;

import org.w3c.dom.Document;

import android.app.Fragment;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Color;
import android.location.Location;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;

public class ShowAllInMapFragment extends Fragment implements
		OnMarkerClickListener, LocationUpdate.OnLocationUpdatedListener {

	private static final int SHOW_SETTINGS = 1;
	
	private MapView mapView;
	private GoogleMap map;
	private Location location;

	private ShowAllInMapFragment currInstance;

	private LocationUpdate locationUpdate;

	public ShowAllInMapFragment() {
	}

	public void setCurrentInstance(ShowAllInMapFragment currInstance) {
		this.currInstance = currInstance;
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setHasOptionsMenu(true);

		locationUpdate = new LocationUpdate(getActivity(), currInstance);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View rootView = inflater.inflate(R.layout.map_layout, container, false);

		map = ((MapFragment) getFragmentManager().findFragmentById(
				R.id.map_layout_fragment)).getMap();
		map.setOnMarkerClickListener(this);
		map.setMyLocationEnabled(true);

		loadLocations();

		return rootView;
	}

	@Override
	public void onResume() {
		super.onResume();

		locationUpdate.startUpdatingLocation();

		if (location == null)
			location = locationUpdate.getLastKnownLocation();
		if (location != null)
			map.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(
					location.getLatitude(), location.getLongitude()), 13));
	}

	@Override
	public void onPause() {
		locationUpdate.stopUpdatingLocation();
		super.onPause();
	}

	@Override
	public void locationUpdated(Location location) {
		this.location = location;
	}

	private void loadLocations() {
		String[] projection = new String[] { LocationsContentProvider.ID_KEY,
				LocationsContentProvider.LATITUDE_KEY,
				LocationsContentProvider.LONGITUDE_KEY,
				LocationsContentProvider.ADDRESS_KEY };
		Cursor query = getActivity().getContentResolver().query(
				LocationsContentProvider.CONTENT_URI, projection, null, null,
				null);

		double latitude, longitude;
		String address;
		if (query.moveToFirst()) {
			do {
				latitude = query.getDouble(query
						.getColumnIndex(LocationsContentProvider.LATITUDE_KEY));
				longitude = query
						.getDouble(query
								.getColumnIndex(LocationsContentProvider.LONGITUDE_KEY));
				address = query.getString(query
						.getColumnIndex(LocationsContentProvider.ADDRESS_KEY));

				map.addMarker(new MarkerOptions()
						.position(new LatLng(latitude, longitude)).alpha(0.7f)
						.title(address));
			} while (query.moveToNext());
		}
	}

	@Override
	public boolean onMarkerClick(Marker marker) {
		marker.showInfoWindow();

		double latitude = marker.getPosition().latitude;
		double longitude = marker.getPosition().longitude;

		LatLng fromPosition = new LatLng(location.getLatitude(),
				location.getLongitude());
		LatLng toPosition = new LatLng(latitude, longitude);

		GMapDirection md = new GMapDirection();
		Document doc = md.getDocument(fromPosition, toPosition,
				GMapDirection.MODE_WALKING);

		if (doc != null) {
			ArrayList<LatLng> directionPoint = md.getDirection(doc);
			PolylineOptions rectLine = new PolylineOptions().width(3).color(
					Color.RED);
			Log.d("jbg teo je", "jbg teo je");
			for (int i = 0; i < directionPoint.size(); i++) {
				rectLine.add(directionPoint.get(i));
			}
			map.addPolyline(rectLine);
		} else {
			Log.d("jbg nije teo", "jbg nije teo");
		}

		final LatLngBounds bnds = new LatLngBounds(new LatLng(Math.min(
				fromPosition.latitude, toPosition.latitude), Math.min(
				fromPosition.longitude, toPosition.longitude)), new LatLng(
				Math.max(fromPosition.latitude, toPosition.latitude), Math.max(
						fromPosition.longitude, toPosition.longitude)));

		map.moveCamera(CameraUpdateFactory.newLatLngBounds(bnds, 30));

		return true;
	}

	@Override
	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
		super.onCreateOptionsMenu(menu, inflater);
		inflater.inflate(R.menu.map_menu, menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.MapMenuSettings:
			Intent settingsIntent = new Intent(getActivity(),
					MapPreferencesActivity.class);
			startActivityForResult(settingsIntent, SHOW_SETTINGS);
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}

}
