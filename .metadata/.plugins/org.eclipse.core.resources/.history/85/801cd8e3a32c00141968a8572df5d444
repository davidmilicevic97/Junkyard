package com.dayvidlakoni.junkyard;

import static com.dayvidlakoni.junkyard.GCMCommonUtilities.SERVER_URL;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import com.google.android.gcm.GCMRegistrar;

import android.content.Context;
import android.util.Log;

public class GCMServerUtilities {

	private static final String TAG = "GCMServerUtilities";

	private static final int MAX_ATTEMPTS = 5;
	private static final int BACKOFF_MILLI_SECONDS = 2000;
	private static final Random random = new Random();

	static void register(final Context context, final String regId) {
		Log.i(TAG, "registering device (regId = " + regId + ")");

		String serverUrl = SERVER_URL;
		Map<String, String> params = new HashMap<String, String>();
		params.put("regId", regId);

		long backoff = BACKOFF_MILLI_SECONDS + random.nextInt(1000);

		// kad GCM vrati registrationId pokusavam da obavestim svoj server
		for (int i = 1; i <= MAX_ATTEMPTS; i++) {
			Log.d(TAG, "Attemp #" + i + " to register");

			try {
				post(serverUrl, params);
				GCMRegistrar.setRegisteredOnServer(context, true);
				return;
			} catch (IOException e) {
				Log.e(TAG, "Failed to register on attempt " + i + ":" + e);

				if (i == MAX_ATTEMPTS)
					break;

				try {
					Log.d(TAG, "Sleeping for " + backoff + " ms before retry");
					Thread.sleep(backoff);
				} catch (InterruptedException e1) {
					Log.d(TAG, "Thread interrupted: abort remaining retries!");
					Thread.currentThread().interrupt();
					return;
				}

				backoff *= 2;
			}
		}
	}

	static void unregister(final Context context, final String regId) {
		Log.i(TAG, "unregistering device (regId = " + regId + ")");

		String serverUrl = SERVER_URL + "/unregister";
		Map<String, String> params = new HashMap<String, String>();
		params.put("regId", regId);

		try {
			post(serverUrl, params);
			GCMRegistrar.setRegisteredOnServer(context, false);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private static void post(String endpoint, Map<String, String> params)
			throws IOException {
		
		URL url;
		try {
			url = new URL(endpoint);
		} catch(MalformedURLException e) {
			throw new IllegalArgumentException("invalid url: + " endpoint);
		}
	}
}
